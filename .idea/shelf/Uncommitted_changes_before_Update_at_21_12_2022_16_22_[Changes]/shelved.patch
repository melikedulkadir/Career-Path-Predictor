Index: Career-Path-Predictor.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Career-Path-Predictor.ipynb b/Career-Path-Predictor.ipynb
--- a/Career-Path-Predictor.ipynb	
+++ b/Career-Path-Predictor.ipynb	
@@ -25,7 +25,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 281,
    "outputs": [],
    "source": [
     "from __future__ import absolute_import\n",
@@ -38,7 +38,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 282,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -62,7 +62,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 283,
    "metadata": {},
    "outputs": [
     {
@@ -70,7 +70,7 @@
       "text/plain": "   Acedamic percentage in Operating Systems  percentage in Algorithms  \\\n0                                        69                        63   \n1                                        78                        62   \n2                                        71                        86   \n3                                        76                        87   \n4                                        92                        62   \n\n   Percentage in Programming Concepts  Percentage in Software Engineering  \\\n0                                  78                                  87   \n1                                  73                                  60   \n2                                  91                                  87   \n3                                  60                                  84   \n4                                  90                                  67   \n\n   Percentage in Computer Networks  Percentage in Electronics Subjects  \\\n0                               94                                  94   \n1                               71                                  70   \n2                               61                                  81   \n3                               89                                  73   \n4                               71                                  89   \n\n   Percentage in Computer Architecture  Percentage in Mathematics  \\\n0                                   87                         84   \n1                                   73                         84   \n2                                   72                         72   \n3                                   62                         88   \n4                                   73                         71   \n\n   Percentage in Communication skills  Hours working per day  ...  \\\n0                                  61                      9  ...   \n1                                  91                     12  ...   \n2                                  94                     11  ...   \n3                                  69                      7  ...   \n4                                  73                      4  ...   \n\n   Interested Type of Books  Salary Range Expected  In a Realtionship?  \\\n0              Prayer books                 salary                  no   \n1                 Childrens                 salary                 yes   \n2                    Travel                   Work                  no   \n3                   Romance                   Work                 yes   \n4                 Cookbooks                 salary                  no   \n\n   Gentle or Tuff behaviour? Management or Technical Salary/work  \\\n0                   stubborn              Management      salary   \n1                     gentle               Technical      salary   \n2                   stubborn              Management        work   \n3                     gentle              Management        work   \n4                   stubborn              Management        work   \n\n  hard/smart worker worked in teams ever? Introvert  \\\n0       hard worker                   yes        no   \n1       hard worker                    no       yes   \n2       hard worker                    no       yes   \n3      smart worker                   yes       yes   \n4       hard worker                   yes       yes   \n\n              Suggested Job Role  \n0         Database Administrator  \n1                Project Manager  \n2                Project Manager  \n3         Security Administrator  \n4  Business Intelligence Analyst  \n\n[5 rows x 39 columns]",
       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Acedamic percentage in Operating Systems</th>\n      <th>percentage in Algorithms</th>\n      <th>Percentage in Programming Concepts</th>\n      <th>Percentage in Software Engineering</th>\n      <th>Percentage in Computer Networks</th>\n      <th>Percentage in Electronics Subjects</th>\n      <th>Percentage in Computer Architecture</th>\n      <th>Percentage in Mathematics</th>\n      <th>Percentage in Communication skills</th>\n      <th>Hours working per day</th>\n      <th>...</th>\n      <th>Interested Type of Books</th>\n      <th>Salary Range Expected</th>\n      <th>In a Realtionship?</th>\n      <th>Gentle or Tuff behaviour?</th>\n      <th>Management or Technical</th>\n      <th>Salary/work</th>\n      <th>hard/smart worker</th>\n      <th>worked in teams ever?</th>\n      <th>Introvert</th>\n      <th>Suggested Job Role</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>69</td>\n      <td>63</td>\n      <td>78</td>\n      <td>87</td>\n      <td>94</td>\n      <td>94</td>\n      <td>87</td>\n      <td>84</td>\n      <td>61</td>\n      <td>9</td>\n      <td>...</td>\n      <td>Prayer books</td>\n      <td>salary</td>\n      <td>no</td>\n      <td>stubborn</td>\n      <td>Management</td>\n      <td>salary</td>\n      <td>hard worker</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>Database Administrator</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>78</td>\n      <td>62</td>\n      <td>73</td>\n      <td>60</td>\n      <td>71</td>\n      <td>70</td>\n      <td>73</td>\n      <td>84</td>\n      <td>91</td>\n      <td>12</td>\n      <td>...</td>\n      <td>Childrens</td>\n      <td>salary</td>\n      <td>yes</td>\n      <td>gentle</td>\n      <td>Technical</td>\n      <td>salary</td>\n      <td>hard worker</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>Project Manager</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>71</td>\n      <td>86</td>\n      <td>91</td>\n      <td>87</td>\n      <td>61</td>\n      <td>81</td>\n      <td>72</td>\n      <td>72</td>\n      <td>94</td>\n      <td>11</td>\n      <td>...</td>\n      <td>Travel</td>\n      <td>Work</td>\n      <td>no</td>\n      <td>stubborn</td>\n      <td>Management</td>\n      <td>work</td>\n      <td>hard worker</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>Project Manager</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>76</td>\n      <td>87</td>\n      <td>60</td>\n      <td>84</td>\n      <td>89</td>\n      <td>73</td>\n      <td>62</td>\n      <td>88</td>\n      <td>69</td>\n      <td>7</td>\n      <td>...</td>\n      <td>Romance</td>\n      <td>Work</td>\n      <td>yes</td>\n      <td>gentle</td>\n      <td>Management</td>\n      <td>work</td>\n      <td>smart worker</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>Security Administrator</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>92</td>\n      <td>62</td>\n      <td>90</td>\n      <td>67</td>\n      <td>71</td>\n      <td>89</td>\n      <td>73</td>\n      <td>71</td>\n      <td>73</td>\n      <td>4</td>\n      <td>...</td>\n      <td>Cookbooks</td>\n      <td>salary</td>\n      <td>no</td>\n      <td>stubborn</td>\n      <td>Management</td>\n      <td>work</td>\n      <td>hard worker</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>Business Intelligence Analyst</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 39 columns</p>\n</div>"
      },
-     "execution_count": 3,
+     "execution_count": 283,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -89,7 +89,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 284,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -108,7 +108,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 285,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -172,7 +172,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 286,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -187,7 +187,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 287,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -199,7 +199,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 288,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -213,7 +213,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 289,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -231,7 +231,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 290,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -243,7 +243,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 291,
    "outputs": [],
    "source": [
     "def high_correlated_cols(dataframe, plot=False, corr_th=0.90):\n",
@@ -265,7 +265,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 292,
    "outputs": [],
    "source": [
     "def plot_importance(model, features, save=False):\n",
@@ -287,7 +287,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 293,
    "metadata": {},
    "outputs": [
     {
@@ -473,7 +473,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 294,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -499,7 +499,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 295,
    "metadata": {},
    "outputs": [
     {
@@ -520,14 +520,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 296,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": "['Academic_Percentage_In_Operating_Systems',\n 'Algorithms_Percentage',\n 'Programming_Concepts_Percentage',\n 'Software_Engineering_Percentage',\n 'Computer_Networks_Percentage',\n 'Electronics_Subjects_Percentage',\n 'Computer_Architecture_Percentage',\n 'Mathematics_Percentage',\n 'Communication_Skills_Percentage',\n 'Hours_Working_Per_Day',\n 'Logical_Quotient_Rating',\n 'Hackathons',\n 'Coding_Skills_Rating',\n 'Public_Speaking_Points']"
      },
-     "execution_count": 16,
+     "execution_count": 296,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -538,7 +538,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 297,
    "metadata": {},
    "outputs": [
     {
@@ -569,7 +569,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 298,
    "outputs": [],
    "source": [
     "scaler = StandardScaler()\n",
@@ -587,14 +587,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": 299,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": "<AxesSubplot:>"
      },
-     "execution_count": 19,
+     "execution_count": 299,
      "metadata": {},
      "output_type": "execute_result"
     },
@@ -615,7 +615,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 300,
    "metadata": {},
    "outputs": [
     {
@@ -660,7 +660,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 301,
    "metadata": {},
    "outputs": [
     {
@@ -812,14 +812,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 302,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": "['Interested_Subjects',\n 'Interested_Career_Area',\n 'Type_Of_Company_Want_To_Settle_In',\n 'Worker_Type',\n 'Certifications',\n 'Workshops']"
      },
-     "execution_count": 22,
+     "execution_count": 302,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -835,14 +835,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
+   "execution_count": 303,
    "outputs": [
     {
      "data": {
       "text/plain": "   Academic_Percentage_In_Operating_Systems  Algorithms_Percentage  \\\n0                                 -0.793450              -1.380807   \n1                                  0.098925              -1.479803   \n2                                 -0.595145               0.896086   \n3                                 -0.099381               0.995082   \n4                                  1.487064              -1.479803   \n\n   Programming_Concepts_Percentage  Software_Engineering_Percentage  \\\n0                         0.096941                         0.981950   \n1                        -0.396421                        -1.694608   \n2                         1.379680                         0.981950   \n3                        -1.679160                         0.684554   \n4                         1.281008                        -1.000686   \n\n   Computer_Networks_Percentage  Electronics_Subjects_Percentage  \\\n0                      1.700806                         1.670279   \n1                     -0.594640                        -0.689921   \n2                     -1.592660                         0.391837   \n3                      1.201796                        -0.394896   \n4                     -0.594640                         1.178570   \n\n   Computer_Architecture_Percentage  Mathematics_Percentage  \\\n0                          0.986229                0.699022   \n1                         -0.404204                0.699022   \n2                         -0.503520               -0.484608   \n3                         -1.496687                1.093566   \n4                         -0.404204               -0.583244   \n\n   Communication_Skills_Percentage  Hours_Working_Per_Day  ...  \\\n0                        -1.575875               0.390962  ...   \n1                         1.393469               1.547595  ...   \n2                         1.690403               1.162051  ...   \n3                        -0.784050              -0.380128  ...   \n4                        -0.388138              -1.536762  ...   \n\n   Interested_Type_Of_Books  Salary_Range_Expected  Being_In_A_Relationship  \\\n0              Prayer books                 salary                       no   \n1                 Childrens                 salary                      yes   \n2                    Travel                   Work                       no   \n3                   Romance                   Work                      yes   \n4                 Cookbooks                 salary                       no   \n\n   Gentle_Or_Tuff_Behaviour Management_Or_Technical Salary/Work   Worker_Type  \\\n0                  stubborn              Management      salary   hard worker   \n1                    gentle               Technical      salary   hard worker   \n2                  stubborn              Management        work   hard worker   \n3                    gentle              Management        work  smart worker   \n4                  stubborn              Management        work   hard worker   \n\n  Worked_In_Teams_Ever Introvert             Suggested_Job_Role  \n0                  yes        no         Database Administrator  \n1                   no       yes                Project Manager  \n2                   no       yes                Project Manager  \n3                  yes       yes         Security Administrator  \n4                  yes       yes  Business Intelligence Analyst  \n\n[5 rows x 39 columns]",
       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Academic_Percentage_In_Operating_Systems</th>\n      <th>Algorithms_Percentage</th>\n      <th>Programming_Concepts_Percentage</th>\n      <th>Software_Engineering_Percentage</th>\n      <th>Computer_Networks_Percentage</th>\n      <th>Electronics_Subjects_Percentage</th>\n      <th>Computer_Architecture_Percentage</th>\n      <th>Mathematics_Percentage</th>\n      <th>Communication_Skills_Percentage</th>\n      <th>Hours_Working_Per_Day</th>\n      <th>...</th>\n      <th>Interested_Type_Of_Books</th>\n      <th>Salary_Range_Expected</th>\n      <th>Being_In_A_Relationship</th>\n      <th>Gentle_Or_Tuff_Behaviour</th>\n      <th>Management_Or_Technical</th>\n      <th>Salary/Work</th>\n      <th>Worker_Type</th>\n      <th>Worked_In_Teams_Ever</th>\n      <th>Introvert</th>\n      <th>Suggested_Job_Role</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.793450</td>\n      <td>-1.380807</td>\n      <td>0.096941</td>\n      <td>0.981950</td>\n      <td>1.700806</td>\n      <td>1.670279</td>\n      <td>0.986229</td>\n      <td>0.699022</td>\n      <td>-1.575875</td>\n      <td>0.390962</td>\n      <td>...</td>\n      <td>Prayer books</td>\n      <td>salary</td>\n      <td>no</td>\n      <td>stubborn</td>\n      <td>Management</td>\n      <td>salary</td>\n      <td>hard worker</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>Database Administrator</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.098925</td>\n      <td>-1.479803</td>\n      <td>-0.396421</td>\n      <td>-1.694608</td>\n      <td>-0.594640</td>\n      <td>-0.689921</td>\n      <td>-0.404204</td>\n      <td>0.699022</td>\n      <td>1.393469</td>\n      <td>1.547595</td>\n      <td>...</td>\n      <td>Childrens</td>\n      <td>salary</td>\n      <td>yes</td>\n      <td>gentle</td>\n      <td>Technical</td>\n      <td>salary</td>\n      <td>hard worker</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>Project Manager</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.595145</td>\n      <td>0.896086</td>\n      <td>1.379680</td>\n      <td>0.981950</td>\n      <td>-1.592660</td>\n      <td>0.391837</td>\n      <td>-0.503520</td>\n      <td>-0.484608</td>\n      <td>1.690403</td>\n      <td>1.162051</td>\n      <td>...</td>\n      <td>Travel</td>\n      <td>Work</td>\n      <td>no</td>\n      <td>stubborn</td>\n      <td>Management</td>\n      <td>work</td>\n      <td>hard worker</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>Project Manager</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-0.099381</td>\n      <td>0.995082</td>\n      <td>-1.679160</td>\n      <td>0.684554</td>\n      <td>1.201796</td>\n      <td>-0.394896</td>\n      <td>-1.496687</td>\n      <td>1.093566</td>\n      <td>-0.784050</td>\n      <td>-0.380128</td>\n      <td>...</td>\n      <td>Romance</td>\n      <td>Work</td>\n      <td>yes</td>\n      <td>gentle</td>\n      <td>Management</td>\n      <td>work</td>\n      <td>smart worker</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>Security Administrator</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.487064</td>\n      <td>-1.479803</td>\n      <td>1.281008</td>\n      <td>-1.000686</td>\n      <td>-0.594640</td>\n      <td>1.178570</td>\n      <td>-0.404204</td>\n      <td>-0.583244</td>\n      <td>-0.388138</td>\n      <td>-1.536762</td>\n      <td>...</td>\n      <td>Cookbooks</td>\n      <td>salary</td>\n      <td>no</td>\n      <td>stubborn</td>\n      <td>Management</td>\n      <td>work</td>\n      <td>hard worker</td>\n      <td>yes</td>\n      <td>yes</td>\n      <td>Business Intelligence Analyst</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 39 columns</p>\n</div>"
      },
-     "execution_count": 23,
+     "execution_count": 303,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -856,7 +856,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 24,
+   "execution_count": 304,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -869,7 +869,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": 305,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -878,7 +878,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 26,
+   "execution_count": 306,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -887,7 +887,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": 307,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -896,7 +896,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 28,
+   "execution_count": 308,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -905,7 +905,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 29,
+   "execution_count": 309,
    "metadata": {},
    "outputs": [
     {
@@ -913,7 +913,7 @@
       "text/plain": "   Academic_Percentage_In_Operating_Systems  Algorithms_Percentage  \\\n0                                 -0.793450              -1.380807   \n1                                  0.098925              -1.479803   \n2                                 -0.595145               0.896086   \n3                                 -0.099381               0.995082   \n4                                  1.487064              -1.479803   \n\n   Programming_Concepts_Percentage  Software_Engineering_Percentage  \\\n0                         0.096941                         0.981950   \n1                        -0.396421                        -1.694608   \n2                         1.379680                         0.981950   \n3                        -1.679160                         0.684554   \n4                         1.281008                        -1.000686   \n\n   Computer_Networks_Percentage  Electronics_Subjects_Percentage  \\\n0                      1.700806                         1.670279   \n1                     -0.594640                        -0.689921   \n2                     -1.592660                         0.391837   \n3                      1.201796                        -0.394896   \n4                     -0.594640                         1.178570   \n\n   Computer_Architecture_Percentage  Mathematics_Percentage  \\\n0                          0.986229                0.699022   \n1                         -0.404204                0.699022   \n2                         -0.503520               -0.484608   \n3                         -1.496687                1.093566   \n4                         -0.404204               -0.583244   \n\n   Communication_Skills_Percentage  Hours_Working_Per_Day  ...  dum_python  \\\n0                        -1.575875               0.390962  ...           0   \n1                         1.393469               1.547595  ...           0   \n2                         1.690403               1.162051  ...           0   \n3                        -0.784050              -0.380128  ...           1   \n4                        -0.388138              -1.536762  ...           0   \n\n   dum_r programming  dum_shell programming  dum_data science  \\\n0                  0                      1                 0   \n1                  0                      0                 0   \n2                  0                      0                 0   \n3                  0                      0                 1   \n4                  0                      0                 0   \n\n   dum_database security  dum_game development  dum_hacking  \\\n0                      0                     0            0   \n1                      1                     0            0   \n2                      0                     0            0   \n3                      0                     0            0   \n4                      0                     0            0   \n\n   dum_system designing  dum_testing  dum_web technologies  \n0                     0            0                     0  \n1                     0            0                     0  \n2                     0            0                     1  \n3                     0            0                     0  \n4                     0            0                     0  \n\n[5 rows x 72 columns]",
       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Academic_Percentage_In_Operating_Systems</th>\n      <th>Algorithms_Percentage</th>\n      <th>Programming_Concepts_Percentage</th>\n      <th>Software_Engineering_Percentage</th>\n      <th>Computer_Networks_Percentage</th>\n      <th>Electronics_Subjects_Percentage</th>\n      <th>Computer_Architecture_Percentage</th>\n      <th>Mathematics_Percentage</th>\n      <th>Communication_Skills_Percentage</th>\n      <th>Hours_Working_Per_Day</th>\n      <th>...</th>\n      <th>dum_python</th>\n      <th>dum_r programming</th>\n      <th>dum_shell programming</th>\n      <th>dum_data science</th>\n      <th>dum_database security</th>\n      <th>dum_game development</th>\n      <th>dum_hacking</th>\n      <th>dum_system designing</th>\n      <th>dum_testing</th>\n      <th>dum_web technologies</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.793450</td>\n      <td>-1.380807</td>\n      <td>0.096941</td>\n      <td>0.981950</td>\n      <td>1.700806</td>\n      <td>1.670279</td>\n      <td>0.986229</td>\n      <td>0.699022</td>\n      <td>-1.575875</td>\n      <td>0.390962</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.098925</td>\n      <td>-1.479803</td>\n      <td>-0.396421</td>\n      <td>-1.694608</td>\n      <td>-0.594640</td>\n      <td>-0.689921</td>\n      <td>-0.404204</td>\n      <td>0.699022</td>\n      <td>1.393469</td>\n      <td>1.547595</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.595145</td>\n      <td>0.896086</td>\n      <td>1.379680</td>\n      <td>0.981950</td>\n      <td>-1.592660</td>\n      <td>0.391837</td>\n      <td>-0.503520</td>\n      <td>-0.484608</td>\n      <td>1.690403</td>\n      <td>1.162051</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-0.099381</td>\n      <td>0.995082</td>\n      <td>-1.679160</td>\n      <td>0.684554</td>\n      <td>1.201796</td>\n      <td>-0.394896</td>\n      <td>-1.496687</td>\n      <td>1.093566</td>\n      <td>-0.784050</td>\n      <td>-0.380128</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.487064</td>\n      <td>-1.479803</td>\n      <td>1.281008</td>\n      <td>-1.000686</td>\n      <td>-0.594640</td>\n      <td>1.178570</td>\n      <td>-0.404204</td>\n      <td>-0.583244</td>\n      <td>-0.388138</td>\n      <td>-1.536762</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 72 columns</p>\n</div>"
      },
-     "execution_count": 29,
+     "execution_count": 309,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -924,14 +924,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 30,
+   "execution_count": 310,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": "<AxesSubplot:>"
      },
-     "execution_count": 30,
+     "execution_count": 310,
      "metadata": {},
      "output_type": "execute_result"
     },
@@ -953,7 +953,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 31,
+   "execution_count": 311,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -964,7 +964,16 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 32,
+   "execution_count": 311,
+   "outputs": [],
+   "source": [],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 312,
    "metadata": {},
    "outputs": [
     {
@@ -1001,7 +1010,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 33,
+   "execution_count": 313,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1010,7 +1019,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 34,
+   "execution_count": 314,
    "outputs": [],
    "source": [
     "df.drop(columns=drop_list, axis = 1, inplace=True)"
@@ -1028,7 +1037,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 35,
+   "execution_count": 315,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1037,7 +1046,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 36,
+   "execution_count": 316,
    "metadata": {},
    "outputs": [
     {
@@ -1045,7 +1054,7 @@
       "text/plain": "                                          Academic_Percentage_In_Operating_Systems  \\\nAcademic_Percentage_In_Operating_Systems                                  1.000000   \nAlgorithms_Percentage                                                     0.001781   \nProgramming_Concepts_Percentage                                          -0.004693   \nSoftware_Engineering_Percentage                                           0.010691   \nComputer_Networks_Percentage                                             -0.001003   \n...                                                                            ...   \ndum_data science                                                          0.003940   \ndum_database security                                                     0.006849   \ndum_game development                                                     -0.002835   \ndum_system designing                                                     -0.003674   \ndum_web technologies                                                      0.008172   \n\n                                          Algorithms_Percentage  \\\nAcademic_Percentage_In_Operating_Systems               0.001781   \nAlgorithms_Percentage                                  1.000000   \nProgramming_Concepts_Percentage                        0.000914   \nSoftware_Engineering_Percentage                        0.004178   \nComputer_Networks_Percentage                          -0.000961   \n...                                                         ...   \ndum_data science                                       0.003964   \ndum_database security                                 -0.000621   \ndum_game development                                   0.001724   \ndum_system designing                                  -0.006055   \ndum_web technologies                                  -0.001255   \n\n                                          Programming_Concepts_Percentage  \\\nAcademic_Percentage_In_Operating_Systems                        -0.004693   \nAlgorithms_Percentage                                            0.000914   \nProgramming_Concepts_Percentage                                  1.000000   \nSoftware_Engineering_Percentage                                  0.006810   \nComputer_Networks_Percentage                                     0.001120   \n...                                                                   ...   \ndum_data science                                                -0.000958   \ndum_database security                                            0.001812   \ndum_game development                                            -0.007896   \ndum_system designing                                            -0.009732   \ndum_web technologies                                             0.003464   \n\n                                          Software_Engineering_Percentage  \\\nAcademic_Percentage_In_Operating_Systems                         0.010691   \nAlgorithms_Percentage                                            0.004178   \nProgramming_Concepts_Percentage                                  0.006810   \nSoftware_Engineering_Percentage                                  1.000000   \nComputer_Networks_Percentage                                    -0.009601   \n...                                                                   ...   \ndum_data science                                                -0.003953   \ndum_database security                                           -0.013119   \ndum_game development                                            -0.003544   \ndum_system designing                                             0.007985   \ndum_web technologies                                            -0.005693   \n\n                                          Computer_Networks_Percentage  \\\nAcademic_Percentage_In_Operating_Systems                     -0.001003   \nAlgorithms_Percentage                                        -0.000961   \nProgramming_Concepts_Percentage                               0.001120   \nSoftware_Engineering_Percentage                              -0.009601   \nComputer_Networks_Percentage                                  1.000000   \n...                                                                ...   \ndum_data science                                             -0.002294   \ndum_database security                                        -0.009264   \ndum_game development                                          0.005298   \ndum_system designing                                          0.013801   \ndum_web technologies                                          0.007036   \n\n                                          Electronics_Subjects_Percentage  \\\nAcademic_Percentage_In_Operating_Systems                        -0.010402   \nAlgorithms_Percentage                                           -0.004914   \nProgramming_Concepts_Percentage                                  0.003585   \nSoftware_Engineering_Percentage                                  0.005680   \nComputer_Networks_Percentage                                    -0.002255   \n...                                                                   ...   \ndum_data science                                                 0.002643   \ndum_database security                                           -0.004657   \ndum_game development                                            -0.007735   \ndum_system designing                                             0.013328   \ndum_web technologies                                            -0.002568   \n\n                                          Computer_Architecture_Percentage  \\\nAcademic_Percentage_In_Operating_Systems                          0.011958   \nAlgorithms_Percentage                                            -0.003793   \nProgramming_Concepts_Percentage                                  -0.001093   \nSoftware_Engineering_Percentage                                   0.000722   \nComputer_Networks_Percentage                                      0.008840   \n...                                                                    ...   \ndum_data science                                                  0.000995   \ndum_database security                                            -0.009384   \ndum_game development                                              0.007971   \ndum_system designing                                             -0.001464   \ndum_web technologies                                              0.010425   \n\n                                          Mathematics_Percentage  \\\nAcademic_Percentage_In_Operating_Systems               -0.003203   \nAlgorithms_Percentage                                  -0.007968   \nProgramming_Concepts_Percentage                        -0.008326   \nSoftware_Engineering_Percentage                         0.001932   \nComputer_Networks_Percentage                            0.003276   \n...                                                          ...   \ndum_data science                                        0.007934   \ndum_database security                                   0.001676   \ndum_game development                                    0.006153   \ndum_system designing                                    0.003400   \ndum_web technologies                                   -0.009837   \n\n                                          Communication_Skills_Percentage  \\\nAcademic_Percentage_In_Operating_Systems                        -0.001770   \nAlgorithms_Percentage                                           -0.001485   \nProgramming_Concepts_Percentage                                 -0.002105   \nSoftware_Engineering_Percentage                                  0.015085   \nComputer_Networks_Percentage                                    -0.008065   \n...                                                                   ...   \ndum_data science                                                -0.015542   \ndum_database security                                            0.001324   \ndum_game development                                             0.007336   \ndum_system designing                                            -0.000841   \ndum_web technologies                                             0.004795   \n\n                                          Hours_Working_Per_Day  ...  \\\nAcademic_Percentage_In_Operating_Systems               0.009925  ...   \nAlgorithms_Percentage                                  0.011567  ...   \nProgramming_Concepts_Percentage                       -0.003532  ...   \nSoftware_Engineering_Percentage                       -0.011287  ...   \nComputer_Networks_Percentage                          -0.001204  ...   \n...                                                         ...  ...   \ndum_data science                                       0.005481  ...   \ndum_database security                                  0.000777  ...   \ndum_game development                                  -0.003866  ...   \ndum_system designing                                   0.008972  ...   \ndum_web technologies                                  -0.004635  ...   \n\n                                          dum_information security  \\\nAcademic_Percentage_In_Operating_Systems                 -0.006420   \nAlgorithms_Percentage                                    -0.002983   \nProgramming_Concepts_Percentage                           0.006082   \nSoftware_Engineering_Percentage                          -0.005249   \nComputer_Networks_Percentage                              0.008276   \n...                                                            ...   \ndum_data science                                         -0.001417   \ndum_database security                                     0.005647   \ndum_game development                                     -0.004636   \ndum_system designing                                      0.007134   \ndum_web technologies                                      0.009939   \n\n                                          dum_machine learning  dum_python  \\\nAcademic_Percentage_In_Operating_Systems             -0.000003    0.003217   \nAlgorithms_Percentage                                 0.007509    0.005236   \nProgramming_Concepts_Percentage                       0.006792   -0.008748   \nSoftware_Engineering_Percentage                       0.003070   -0.000265   \nComputer_Networks_Percentage                         -0.006701    0.008151   \n...                                                        ...         ...   \ndum_data science                                      0.012025    0.004143   \ndum_database security                                 0.000576   -0.006082   \ndum_game development                                 -0.000646    0.003772   \ndum_system designing                                  0.003490   -0.001691   \ndum_web technologies                                  0.003971   -0.003908   \n\n                                          dum_r programming  \\\nAcademic_Percentage_In_Operating_Systems           0.001074   \nAlgorithms_Percentage                             -0.004820   \nProgramming_Concepts_Percentage                   -0.007271   \nSoftware_Engineering_Percentage                   -0.002466   \nComputer_Networks_Percentage                       0.003491   \n...                                                     ...   \ndum_data science                                   0.004637   \ndum_database security                              0.001753   \ndum_game development                              -0.001365   \ndum_system designing                              -0.010540   \ndum_web technologies                              -0.006175   \n\n                                          dum_shell programming  \\\nAcademic_Percentage_In_Operating_Systems              -0.002261   \nAlgorithms_Percentage                                  0.005553   \nProgramming_Concepts_Percentage                        0.000101   \nSoftware_Engineering_Percentage                       -0.010080   \nComputer_Networks_Percentage                          -0.005981   \n...                                                         ...   \ndum_data science                                      -0.002486   \ndum_database security                                 -0.012597   \ndum_game development                                   0.008111   \ndum_system designing                                  -0.002052   \ndum_web technologies                                   0.001799   \n\n                                          dum_data science  \\\nAcademic_Percentage_In_Operating_Systems          0.003940   \nAlgorithms_Percentage                             0.003964   \nProgramming_Concepts_Percentage                  -0.000958   \nSoftware_Engineering_Percentage                  -0.003953   \nComputer_Networks_Percentage                     -0.002294   \n...                                                    ...   \ndum_data science                                  1.000000   \ndum_database security                            -0.145079   \ndum_game development                             -0.145243   \ndum_system designing                             -0.145046   \ndum_web technologies                             -0.147345   \n\n                                          dum_database security  \\\nAcademic_Percentage_In_Operating_Systems               0.006849   \nAlgorithms_Percentage                                 -0.000621   \nProgramming_Concepts_Percentage                        0.001812   \nSoftware_Engineering_Percentage                       -0.013119   \nComputer_Networks_Percentage                          -0.009264   \n...                                                         ...   \ndum_data science                                      -0.145079   \ndum_database security                                  1.000000   \ndum_game development                                  -0.144132   \ndum_system designing                                  -0.143936   \ndum_web technologies                                  -0.146217   \n\n                                          dum_game development  \\\nAcademic_Percentage_In_Operating_Systems             -0.002835   \nAlgorithms_Percentage                                 0.001724   \nProgramming_Concepts_Percentage                      -0.007896   \nSoftware_Engineering_Percentage                      -0.003544   \nComputer_Networks_Percentage                          0.005298   \n...                                                        ...   \ndum_data science                                     -0.145243   \ndum_database security                                -0.144132   \ndum_game development                                  1.000000   \ndum_system designing                                 -0.144099   \ndum_web technologies                                 -0.146383   \n\n                                          dum_system designing  \\\nAcademic_Percentage_In_Operating_Systems             -0.003674   \nAlgorithms_Percentage                                -0.006055   \nProgramming_Concepts_Percentage                      -0.009732   \nSoftware_Engineering_Percentage                       0.007985   \nComputer_Networks_Percentage                          0.013801   \n...                                                        ...   \ndum_data science                                     -0.145046   \ndum_database security                                -0.143936   \ndum_game development                                 -0.144099   \ndum_system designing                                  1.000000   \ndum_web technologies                                 -0.146184   \n\n                                          dum_web technologies  \nAcademic_Percentage_In_Operating_Systems              0.008172  \nAlgorithms_Percentage                                -0.001255  \nProgramming_Concepts_Percentage                       0.003464  \nSoftware_Engineering_Percentage                      -0.005693  \nComputer_Networks_Percentage                          0.007036  \n...                                                        ...  \ndum_data science                                     -0.147345  \ndum_database security                                -0.146217  \ndum_game development                                 -0.146383  \ndum_system designing                                 -0.146184  \ndum_web technologies                                  1.000000  \n\n[64 rows x 64 columns]",
       "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Academic_Percentage_In_Operating_Systems</th>\n      <th>Algorithms_Percentage</th>\n      <th>Programming_Concepts_Percentage</th>\n      <th>Software_Engineering_Percentage</th>\n      <th>Computer_Networks_Percentage</th>\n      <th>Electronics_Subjects_Percentage</th>\n      <th>Computer_Architecture_Percentage</th>\n      <th>Mathematics_Percentage</th>\n      <th>Communication_Skills_Percentage</th>\n      <th>Hours_Working_Per_Day</th>\n      <th>...</th>\n      <th>dum_information security</th>\n      <th>dum_machine learning</th>\n      <th>dum_python</th>\n      <th>dum_r programming</th>\n      <th>dum_shell programming</th>\n      <th>dum_data science</th>\n      <th>dum_database security</th>\n      <th>dum_game development</th>\n      <th>dum_system designing</th>\n      <th>dum_web technologies</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Academic_Percentage_In_Operating_Systems</th>\n      <td>1.000000</td>\n      <td>0.001781</td>\n      <td>-0.004693</td>\n      <td>0.010691</td>\n      <td>-0.001003</td>\n      <td>-0.010402</td>\n      <td>0.011958</td>\n      <td>-0.003203</td>\n      <td>-0.001770</td>\n      <td>0.009925</td>\n      <td>...</td>\n      <td>-0.006420</td>\n      <td>-0.000003</td>\n      <td>0.003217</td>\n      <td>0.001074</td>\n      <td>-0.002261</td>\n      <td>0.003940</td>\n      <td>0.006849</td>\n      <td>-0.002835</td>\n      <td>-0.003674</td>\n      <td>0.008172</td>\n    </tr>\n    <tr>\n      <th>Algorithms_Percentage</th>\n      <td>0.001781</td>\n      <td>1.000000</td>\n      <td>0.000914</td>\n      <td>0.004178</td>\n      <td>-0.000961</td>\n      <td>-0.004914</td>\n      <td>-0.003793</td>\n      <td>-0.007968</td>\n      <td>-0.001485</td>\n      <td>0.011567</td>\n      <td>...</td>\n      <td>-0.002983</td>\n      <td>0.007509</td>\n      <td>0.005236</td>\n      <td>-0.004820</td>\n      <td>0.005553</td>\n      <td>0.003964</td>\n      <td>-0.000621</td>\n      <td>0.001724</td>\n      <td>-0.006055</td>\n      <td>-0.001255</td>\n    </tr>\n    <tr>\n      <th>Programming_Concepts_Percentage</th>\n      <td>-0.004693</td>\n      <td>0.000914</td>\n      <td>1.000000</td>\n      <td>0.006810</td>\n      <td>0.001120</td>\n      <td>0.003585</td>\n      <td>-0.001093</td>\n      <td>-0.008326</td>\n      <td>-0.002105</td>\n      <td>-0.003532</td>\n      <td>...</td>\n      <td>0.006082</td>\n      <td>0.006792</td>\n      <td>-0.008748</td>\n      <td>-0.007271</td>\n      <td>0.000101</td>\n      <td>-0.000958</td>\n      <td>0.001812</td>\n      <td>-0.007896</td>\n      <td>-0.009732</td>\n      <td>0.003464</td>\n    </tr>\n    <tr>\n      <th>Software_Engineering_Percentage</th>\n      <td>0.010691</td>\n      <td>0.004178</td>\n      <td>0.006810</td>\n      <td>1.000000</td>\n      <td>-0.009601</td>\n      <td>0.005680</td>\n      <td>0.000722</td>\n      <td>0.001932</td>\n      <td>0.015085</td>\n      <td>-0.011287</td>\n      <td>...</td>\n      <td>-0.005249</td>\n      <td>0.003070</td>\n      <td>-0.000265</td>\n      <td>-0.002466</td>\n      <td>-0.010080</td>\n      <td>-0.003953</td>\n      <td>-0.013119</td>\n      <td>-0.003544</td>\n      <td>0.007985</td>\n      <td>-0.005693</td>\n    </tr>\n    <tr>\n      <th>Computer_Networks_Percentage</th>\n      <td>-0.001003</td>\n      <td>-0.000961</td>\n      <td>0.001120</td>\n      <td>-0.009601</td>\n      <td>1.000000</td>\n      <td>-0.002255</td>\n      <td>0.008840</td>\n      <td>0.003276</td>\n      <td>-0.008065</td>\n      <td>-0.001204</td>\n      <td>...</td>\n      <td>0.008276</td>\n      <td>-0.006701</td>\n      <td>0.008151</td>\n      <td>0.003491</td>\n      <td>-0.005981</td>\n      <td>-0.002294</td>\n      <td>-0.009264</td>\n      <td>0.005298</td>\n      <td>0.013801</td>\n      <td>0.007036</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>dum_data science</th>\n      <td>0.003940</td>\n      <td>0.003964</td>\n      <td>-0.000958</td>\n      <td>-0.003953</td>\n      <td>-0.002294</td>\n      <td>0.002643</td>\n      <td>0.000995</td>\n      <td>0.007934</td>\n      <td>-0.015542</td>\n      <td>0.005481</td>\n      <td>...</td>\n      <td>-0.001417</td>\n      <td>0.012025</td>\n      <td>0.004143</td>\n      <td>0.004637</td>\n      <td>-0.002486</td>\n      <td>1.000000</td>\n      <td>-0.145079</td>\n      <td>-0.145243</td>\n      <td>-0.145046</td>\n      <td>-0.147345</td>\n    </tr>\n    <tr>\n      <th>dum_database security</th>\n      <td>0.006849</td>\n      <td>-0.000621</td>\n      <td>0.001812</td>\n      <td>-0.013119</td>\n      <td>-0.009264</td>\n      <td>-0.004657</td>\n      <td>-0.009384</td>\n      <td>0.001676</td>\n      <td>0.001324</td>\n      <td>0.000777</td>\n      <td>...</td>\n      <td>0.005647</td>\n      <td>0.000576</td>\n      <td>-0.006082</td>\n      <td>0.001753</td>\n      <td>-0.012597</td>\n      <td>-0.145079</td>\n      <td>1.000000</td>\n      <td>-0.144132</td>\n      <td>-0.143936</td>\n      <td>-0.146217</td>\n    </tr>\n    <tr>\n      <th>dum_game development</th>\n      <td>-0.002835</td>\n      <td>0.001724</td>\n      <td>-0.007896</td>\n      <td>-0.003544</td>\n      <td>0.005298</td>\n      <td>-0.007735</td>\n      <td>0.007971</td>\n      <td>0.006153</td>\n      <td>0.007336</td>\n      <td>-0.003866</td>\n      <td>...</td>\n      <td>-0.004636</td>\n      <td>-0.000646</td>\n      <td>0.003772</td>\n      <td>-0.001365</td>\n      <td>0.008111</td>\n      <td>-0.145243</td>\n      <td>-0.144132</td>\n      <td>1.000000</td>\n      <td>-0.144099</td>\n      <td>-0.146383</td>\n    </tr>\n    <tr>\n      <th>dum_system designing</th>\n      <td>-0.003674</td>\n      <td>-0.006055</td>\n      <td>-0.009732</td>\n      <td>0.007985</td>\n      <td>0.013801</td>\n      <td>0.013328</td>\n      <td>-0.001464</td>\n      <td>0.003400</td>\n      <td>-0.000841</td>\n      <td>0.008972</td>\n      <td>...</td>\n      <td>0.007134</td>\n      <td>0.003490</td>\n      <td>-0.001691</td>\n      <td>-0.010540</td>\n      <td>-0.002052</td>\n      <td>-0.145046</td>\n      <td>-0.143936</td>\n      <td>-0.144099</td>\n      <td>1.000000</td>\n      <td>-0.146184</td>\n    </tr>\n    <tr>\n      <th>dum_web technologies</th>\n      <td>0.008172</td>\n      <td>-0.001255</td>\n      <td>0.003464</td>\n      <td>-0.005693</td>\n      <td>0.007036</td>\n      <td>-0.002568</td>\n      <td>0.010425</td>\n      <td>-0.009837</td>\n      <td>0.004795</td>\n      <td>-0.004635</td>\n      <td>...</td>\n      <td>0.009939</td>\n      <td>0.003971</td>\n      <td>-0.003908</td>\n      <td>-0.006175</td>\n      <td>0.001799</td>\n      <td>-0.147345</td>\n      <td>-0.146217</td>\n      <td>-0.146383</td>\n      <td>-0.146184</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>64 rows Ã— 64 columns</p>\n</div>"
      },
-     "execution_count": 36,
+     "execution_count": 316,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1056,14 +1065,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 37,
+   "execution_count": 317,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": "<AxesSubplot:xlabel='Suggested_Job_Role', ylabel='count'>"
      },
-     "execution_count": 37,
+     "execution_count": 317,
      "metadata": {},
      "output_type": "execute_result"
     },
@@ -1093,7 +1102,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 38,
+   "execution_count": 318,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1104,7 +1113,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 39,
+   "execution_count": 319,
    "metadata": {},
    "outputs": [
     {
@@ -1137,7 +1146,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 40,
+   "execution_count": 320,
    "metadata": {},
    "outputs": [
     {
@@ -1164,7 +1173,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 41,
+   "execution_count": 321,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1182,7 +1191,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 42,
+   "execution_count": 322,
    "outputs": [],
    "source": [
     "col_avg = df[\"Public_Speaking_Points\"].mean()\n",
@@ -1197,7 +1206,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 43,
+   "execution_count": 323,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1210,7 +1219,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 44,
+   "execution_count": 324,
    "outputs": [],
    "source": [
     "df['Security'] = df.apply (lambda row: categorise_security(row), axis=1)"
@@ -1221,7 +1230,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 45,
+   "execution_count": 325,
    "outputs": [],
    "source": [
     "def categorise_coding(row):\n",
@@ -1238,7 +1247,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 46,
+   "execution_count": 326,
    "outputs": [],
    "source": [
     "df['Coding_Skills'] = df.apply (lambda row: categorise_coding(row), axis=1)\n",
@@ -1252,7 +1261,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 47,
+   "execution_count": 327,
    "outputs": [],
    "source": [
     "df[\"LogicalQuotient_Memory\"] = df[\"Logical_Quotient_Rating\"]*df[\"Memory_Capability_Score\"]"
@@ -1263,7 +1272,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 48,
+   "execution_count": 328,
    "outputs": [
     {
      "data": {
@@ -1292,7 +1301,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 49,
+   "execution_count": 329,
    "outputs": [],
    "source": [
     "X = df.drop(columns=[\"Suggested_Job_Role\"],axis=1)\n",
@@ -1305,7 +1314,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 50,
+   "execution_count": 330,
    "outputs": [
     {
      "name": "stdout",
@@ -1340,7 +1349,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 51,
+   "execution_count": 331,
    "outputs": [
     {
      "name": "stdout",
@@ -1375,7 +1384,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 52,
+   "execution_count": 332,
    "outputs": [
     {
      "name": "stdout",
@@ -1409,7 +1418,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 53,
+   "execution_count": 333,
    "outputs": [
     {
      "name": "stdout",
@@ -1452,7 +1461,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 54,
+   "execution_count": 334,
    "outputs": [],
    "source": [
     "import numpy as np\n",
@@ -1477,7 +1486,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 55,
+   "execution_count": 335,
    "outputs": [],
    "source": [
     "df = shuffle(df)\n",
@@ -1491,7 +1500,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 56,
+   "execution_count": 336,
    "outputs": [],
    "source": [
     "l_encode = LabelEncoder()\n",
@@ -1506,13 +1515,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 57,
+   "execution_count": 337,
    "outputs": [
     {
      "data": {
       "text/plain": "((14000, 69), (14000, 6), (6000, 69), (6000, 6))"
      },
-     "execution_count": 57,
+     "execution_count": 337,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1527,116 +1536,71 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 63,
+   "execution_count": 351,
+   "outputs": [],
+   "source": [
+    "train_x = np.reshape(train_x, (train_x.shape[0], train_x.shape[1], 1))"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 368,
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 1/40\n",
-      "875/875 [==============================] - 4s 3ms/step - loss: 0.1389 - accuracy: 0.1975 - val_loss: 0.1383 - val_accuracy: 0.2002\n",
-      "Epoch 2/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1375 - accuracy: 0.2019 - val_loss: 0.1379 - val_accuracy: 0.1988\n",
-      "Epoch 3/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1372 - accuracy: 0.2150 - val_loss: 0.1378 - val_accuracy: 0.1972\n",
-      "Epoch 4/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1371 - accuracy: 0.2163 - val_loss: 0.1379 - val_accuracy: 0.1972\n",
-      "Epoch 5/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1369 - accuracy: 0.2214 - val_loss: 0.1378 - val_accuracy: 0.1998\n",
-      "Epoch 6/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1368 - accuracy: 0.2227 - val_loss: 0.1378 - val_accuracy: 0.2005\n",
-      "Epoch 7/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1367 - accuracy: 0.2265 - val_loss: 0.1380 - val_accuracy: 0.1962\n",
-      "Epoch 8/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1366 - accuracy: 0.2305 - val_loss: 0.1380 - val_accuracy: 0.1927\n",
-      "Epoch 9/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1365 - accuracy: 0.2300 - val_loss: 0.1381 - val_accuracy: 0.1953\n",
-      "Epoch 10/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1364 - accuracy: 0.2346 - val_loss: 0.1381 - val_accuracy: 0.1972\n",
-      "Epoch 11/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1363 - accuracy: 0.2403 - val_loss: 0.1381 - val_accuracy: 0.1952\n",
-      "Epoch 12/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1362 - accuracy: 0.2383 - val_loss: 0.1381 - val_accuracy: 0.1963\n",
-      "Epoch 13/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1361 - accuracy: 0.2450 - val_loss: 0.1381 - val_accuracy: 0.1973\n",
-      "Epoch 14/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1360 - accuracy: 0.2449 - val_loss: 0.1382 - val_accuracy: 0.1962\n",
-      "Epoch 15/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1359 - accuracy: 0.2449 - val_loss: 0.1382 - val_accuracy: 0.1925\n",
-      "Epoch 16/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1358 - accuracy: 0.2526 - val_loss: 0.1382 - val_accuracy: 0.1918\n",
-      "Epoch 17/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1357 - accuracy: 0.2539 - val_loss: 0.1384 - val_accuracy: 0.1897\n",
-      "Epoch 18/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1356 - accuracy: 0.2566 - val_loss: 0.1385 - val_accuracy: 0.1910\n",
-      "Epoch 19/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1354 - accuracy: 0.2576 - val_loss: 0.1386 - val_accuracy: 0.1923\n",
-      "Epoch 20/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1353 - accuracy: 0.2630 - val_loss: 0.1386 - val_accuracy: 0.1920\n",
-      "Epoch 21/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1352 - accuracy: 0.2598 - val_loss: 0.1386 - val_accuracy: 0.1938\n",
-      "Epoch 22/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1350 - accuracy: 0.2641 - val_loss: 0.1388 - val_accuracy: 0.1972\n",
-      "Epoch 23/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1349 - accuracy: 0.2711 - val_loss: 0.1387 - val_accuracy: 0.1895\n",
-      "Epoch 24/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1347 - accuracy: 0.2745 - val_loss: 0.1387 - val_accuracy: 0.1932\n",
-      "Epoch 25/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1346 - accuracy: 0.2754 - val_loss: 0.1389 - val_accuracy: 0.1963\n",
-      "Epoch 26/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1345 - accuracy: 0.2786 - val_loss: 0.1390 - val_accuracy: 0.1918\n",
-      "Epoch 27/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1343 - accuracy: 0.2846 - val_loss: 0.1391 - val_accuracy: 0.1935\n",
-      "Epoch 28/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1342 - accuracy: 0.2849 - val_loss: 0.1390 - val_accuracy: 0.1905\n",
-      "Epoch 29/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1340 - accuracy: 0.2859 - val_loss: 0.1392 - val_accuracy: 0.1967\n",
-      "Epoch 30/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1338 - accuracy: 0.2890 - val_loss: 0.1393 - val_accuracy: 0.1942\n",
-      "Epoch 31/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1337 - accuracy: 0.2905 - val_loss: 0.1394 - val_accuracy: 0.1913\n",
-      "Epoch 32/40\n",
-      "875/875 [==============================] - 3s 3ms/step - loss: 0.1335 - accuracy: 0.2919 - val_loss: 0.1395 - val_accuracy: 0.1962\n",
-      "Epoch 33/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1333 - accuracy: 0.2986 - val_loss: 0.1397 - val_accuracy: 0.1988\n",
-      "Epoch 34/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1331 - accuracy: 0.3029 - val_loss: 0.1396 - val_accuracy: 0.1958\n",
-      "Epoch 35/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1329 - accuracy: 0.3041 - val_loss: 0.1398 - val_accuracy: 0.1900\n",
-      "Epoch 36/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1327 - accuracy: 0.3088 - val_loss: 0.1400 - val_accuracy: 0.1935\n",
-      "Epoch 37/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1325 - accuracy: 0.3087 - val_loss: 0.1402 - val_accuracy: 0.1872\n",
-      "Epoch 38/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1322 - accuracy: 0.3144 - val_loss: 0.1401 - val_accuracy: 0.1970\n",
-      "Epoch 39/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1321 - accuracy: 0.3138 - val_loss: 0.1403 - val_accuracy: 0.1938\n",
-      "Epoch 40/40\n",
-      "875/875 [==============================] - 2s 3ms/step - loss: 0.1318 - accuracy: 0.3189 - val_loss: 0.1406 - val_accuracy: 0.1903\n",
-      "188/188 [==============================] - 0s 2ms/step - loss: 0.1406 - accuracy: 0.1903\n",
-      "loss 0.14059434831142426\n",
-      "accuracy 0.19033333659172058\n"
+      "Epoch 1/4\n",
+      "875/875 [==============================] - 66s 70ms/step - loss: 2.4025 - accuracy: 0.1634\n",
+      "Epoch 2/4\n",
+      "875/875 [==============================] - 61s 70ms/step - loss: 1.7799 - accuracy: 0.1908\n",
+      "Epoch 3/4\n",
+      "875/875 [==============================] - 62s 71ms/step - loss: 1.7670 - accuracy: 0.2001\n",
+      "Epoch 4/4\n",
+      "875/875 [==============================] - 61s 70ms/step - loss: 1.7639 - accuracy: 0.1913\n",
+      "188/188 [==============================] - 1s 4ms/step - loss: 1.7843 - accuracy: 0.2002\n",
+      "loss 1.7843458652496338\n",
+      "accuracy 0.20016667246818542\n"
      ]
     }
    ],
    "source": [
+    "from keras.applications.densenet import layers\n",
     "from keras.optimizers import Adam\n",
     "\n",
-    "in_dim = len(df.columns)-1\n",
+    "regressor = Sequential()\n",
     "\n",
-    "model = Sequential()\n",
-    "model.add(Dense(60, input_dim = in_dim, activation = 'tanh'))\n",
-    "model.add(Dense(60, activation = 'tanh'))\n",
-    "model.add(Dense(60, activation = 'tanh'))\n",
-    "model.add(Dense(60, activation = 'tanh'))\n",
-    "model.add(Dense(6, activation = 'softmax'))\n",
-    "adam = Adam(lr=0.0001, clipvalue = 0.5,epsilon=1e-8)\n",
-    "model.compile(loss = 'MSE', optimizer = adam, metrics = ['accuracy'])\n",
-    "history = model.fit(train_x, train_y, epochs = 40, batch_size = 16, validation_data=(test_x, test_y))\n",
+    "#Adding the first RNN layer and some Dropout regularization\n",
+    "regressor.add(layers.SimpleRNN(units = 69, activation='tanh', return_sequences=True, input_shape= (X_train.shape[1],1)))\n",
+    "regressor.add(layers.Dropout(0.2))\n",
+    "\n",
+    "#Adding the second RNN layer and some Dropout regularization\n",
+    "regressor.add(layers.SimpleRNN(units = 50, activation='tanh', return_sequences=True))\n",
+    "regressor.add(layers.Dropout(0.2))\n",
+    "\n",
+    "#Adding the third RNN layer and some Dropout regularization\n",
+    "regressor.add(layers.SimpleRNN(units = 50, activation='tanh', return_sequences=True))\n",
+    "regressor.add(layers.Dropout(0.2))\n",
+    "\n",
+    "#Adding the fourth RNN layer and some Dropout regularization\n",
+    "regressor.add(layers.SimpleRNN(units = 50, activation='softmax'))\n",
+    "regressor.add(layers.Dropout(0.2))\n",
+    "\n",
+    "#Adding the output layer\n",
+    "regressor.add(Dense(units = 6))\n",
+    "\n",
+    "#Compile the RNN\n",
+    "regressor.compile(optimizer='adam', loss='categorical_crossentropy', metrics=[\"accuracy\"])\n",
+    "\n",
+    "#Fitting the RNN to the Training set\n",
+    "history = regressor.fit(train_x, train_y, epochs=4, batch_size=16)\n",
     "scores = model.evaluate(test_x, test_y)\n",
     "\n",
     "for i, m in enumerate(model.metrics_names):\n",
-    "    print(m, scores[i])"
+    "    print(m, scores[i])\n"
    ],
    "metadata": {
     "collapsed": false
@@ -1644,20 +1608,41 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 64,
+   "execution_count": 370,
    "outputs": [
     {
      "data": {
-      "text/plain": "<matplotlib.legend.Legend at 0x1339eae06d0>"
+      "text/plain": "       loss  accuracy\n0  2.402452  0.163357\n1  1.779893  0.190786\n2  1.767010  0.200143\n3  1.763915  0.191286",
+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>loss</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2.402452</td>\n      <td>0.163357</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.779893</td>\n      <td>0.190786</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.767010</td>\n      <td>0.200143</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.763915</td>\n      <td>0.191286</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
      },
-     "execution_count": 64,
+     "execution_count": 370,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "logs"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 371,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<matplotlib.legend.Legend at 0x1c64cdb6430>"
+     },
+     "execution_count": 371,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
       "text/plain": "<Figure size 1008x288 with 1 Axes>",
-      "image/png": "\n"
+      "image/png": "\n"
      },
      "metadata": {},
      "output_type": "display_data"
@@ -1668,7 +1653,7 @@
     "plt.figure(figsize=(14, 4))\n",
     "plt.subplot(1, 2, 1)\n",
     "plt.plot(logs.loc[5:,\"accuracy\"], lw=2, label='training accuracy')\n",
-    "plt.plot(logs.loc[5:,\"val_accuracy\"], lw=2, label='test accuracy')\n",
+    "plt.plot(logs.loc[5:,\"loss\"], lw=2, label='loss')\n",
     "plt.xlabel(\"Epoch\")\n",
     "plt.ylabel(\"Accuracy\")\n",
     "plt.legend()"
@@ -1679,7 +1664,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 65,
+   "execution_count": 250,
    "outputs": [],
    "source": [
     "import keras\n",
@@ -1703,7 +1688,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 66,
+   "execution_count": 251,
    "outputs": [],
    "source": [
     "learning_rate = 0.001\n",
@@ -1719,7 +1704,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 67,
+   "execution_count": 252,
    "outputs": [],
    "source": [
     "history = model.fit(train_x, train_y,\n",
@@ -1734,33 +1719,33 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 68,
+   "execution_count": 253,
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "1/1 [==============================] - 0s 133ms/step\n",
-      "[[0.3416528  0.11470652 0.121534   0.16269128 0.1442751  0.09425449]\n",
-      " [0.0691846  0.07347159 0.18299542 0.24553406 0.2562259  0.21302068]\n",
-      " [0.26731077 0.09008495 0.12785648 0.23350722 0.1536359  0.09087527]\n",
-      " [0.17543234 0.1049961  0.1954891  0.19539332 0.1613027  0.17777038]\n",
-      " [0.16310886 0.08275828 0.16977742 0.20684461 0.22601484 0.1527173 ]\n",
-      " [0.18727863 0.05521164 0.1819926  0.21164683 0.2590141  0.11658965]\n",
-      " [0.21993724 0.08930722 0.17045736 0.19285783 0.19931982 0.13799997]\n",
-      " [0.2306208  0.08728753 0.261981   0.08922119 0.24816348 0.10192656]\n",
-      " [0.20244204 0.09094547 0.19839719 0.18244785 0.18134211 0.14804488]\n",
-      " [0.25657222 0.04915261 0.18410586 0.17507406 0.2639306  0.08894654]]\n",
-      "Predicted: Business Intelligence Analyst, True: Project Manager\n",
-      "Predicted: Software Developer, True: Business Intelligence Analyst\n",
-      "Predicted: Business Intelligence Analyst, True: Database Administrator\n",
+      "1/1 [==============================] - 0s 157ms/step\n",
+      "[[0.2107228  0.03809167 0.27661037 0.2159202  0.16410324 0.14022288]\n",
+      " [0.1586408  0.08692402 0.20809609 0.18998054 0.20382957 0.16325808]\n",
+      " [0.16748719 0.08897357 0.19198903 0.1960846  0.1917416  0.15437107]\n",
+      " [0.15706038 0.0267482  0.2665269  0.17259717 0.20595592 0.14922509]\n",
+      " [0.19481453 0.07853031 0.24005476 0.17627768 0.23114814 0.08186667]\n",
+      " [0.26415825 0.12349776 0.14492112 0.189387   0.23422746 0.06068772]\n",
+      " [0.18131971 0.09553879 0.18237664 0.1807437  0.21436726 0.12408141]\n",
+      " [0.18014288 0.0923279  0.22073574 0.21170728 0.16680773 0.12036832]\n",
+      " [0.17080401 0.09348408 0.21640545 0.1799378  0.19359541 0.17279647]\n",
+      " [0.11933912 0.10616771 0.18541786 0.14120927 0.32794923 0.07994457]]\n",
+      "Predicted: Project Manager, True: Software Developer\n",
       "Predicted: Project Manager, True: Business Intelligence Analyst\n",
-      "Predicted: Software Developer, True: Software Developer\n",
-      "Predicted: Software Developer, True: Project Manager\n",
+      "Predicted: Security Administrator, True: Project Manager\n",
+      "Predicted: Project Manager, True: Technical Support\n",
+      "Predicted: Project Manager, True: Database Administrator\n",
       "Predicted: Business Intelligence Analyst, True: Software Developer\n",
+      "Predicted: Software Developer, True: Business Intelligence Analyst\n",
       "Predicted: Project Manager, True: Project Manager\n",
-      "Predicted: Business Intelligence Analyst, True: Software Developer\n",
-      "Predicted: Software Developer, True: Security Administrator\n"
+      "Predicted: Project Manager, True: Technical Support\n",
+      "Predicted: Software Developer, True: Project Manager\n"
      ]
     }
    ],
@@ -1783,7 +1768,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 69,
+   "execution_count": 254,
    "outputs": [],
    "source": [
     "sns.set()\n",
@@ -1820,7 +1805,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 70,
+   "execution_count": 255,
    "outputs": [],
    "source": [
     "import tensorflow as tf"
@@ -1830,80 +1815,9 @@
    }
   },
   {
-   "cell_type": "code",
-   "execution_count": 71,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Epoch 1/20\n",
-      "438/438 [==============================] - 2s 3ms/step - loss: 0.1508 - rmse: 0.3883 - val_loss: 0.1417 - val_rmse: 0.3764\n",
-      "Epoch 2/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1413 - rmse: 0.3759 - val_loss: 0.1403 - val_rmse: 0.3745\n",
-      "Epoch 3/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1396 - rmse: 0.3737 - val_loss: 0.1392 - val_rmse: 0.3731\n",
-      "Epoch 4/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1387 - rmse: 0.3725 - val_loss: 0.1387 - val_rmse: 0.3724\n",
-      "Epoch 5/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1384 - rmse: 0.3720 - val_loss: 0.1388 - val_rmse: 0.3725\n",
-      "Epoch 6/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1380 - rmse: 0.3715 - val_loss: 0.1380 - val_rmse: 0.3715\n",
-      "Epoch 7/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1378 - rmse: 0.3713 - val_loss: 0.1384 - val_rmse: 0.3720\n",
-      "Epoch 8/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1377 - rmse: 0.3711 - val_loss: 0.1379 - val_rmse: 0.3713\n",
-      "Epoch 9/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1376 - rmse: 0.3710 - val_loss: 0.1381 - val_rmse: 0.3716\n",
-      "Epoch 10/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1375 - rmse: 0.3708 - val_loss: 0.1385 - val_rmse: 0.3721\n",
-      "Epoch 11/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1374 - rmse: 0.3707 - val_loss: 0.1378 - val_rmse: 0.3712\n",
-      "Epoch 12/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1373 - rmse: 0.3706 - val_loss: 0.1379 - val_rmse: 0.3713\n",
-      "Epoch 13/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1373 - rmse: 0.3706 - val_loss: 0.1380 - val_rmse: 0.3715\n",
-      "Epoch 14/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1374 - rmse: 0.3706 - val_loss: 0.1376 - val_rmse: 0.3710\n",
-      "Epoch 15/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1373 - rmse: 0.3705 - val_loss: 0.1381 - val_rmse: 0.3716\n",
-      "Epoch 16/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1373 - rmse: 0.3705 - val_loss: 0.1375 - val_rmse: 0.3709\n",
-      "Epoch 17/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1373 - rmse: 0.3705 - val_loss: 0.1377 - val_rmse: 0.3711\n",
-      "Epoch 18/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1372 - rmse: 0.3705 - val_loss: 0.1376 - val_rmse: 0.3709\n",
-      "Epoch 19/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1372 - rmse: 0.3704 - val_loss: 0.1376 - val_rmse: 0.3709\n",
-      "Epoch 20/20\n",
-      "438/438 [==============================] - 1s 3ms/step - loss: 0.1372 - rmse: 0.3704 - val_loss: 0.1377 - val_rmse: 0.3711\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "<keras.callbacks.History at 0x133b5669550>"
-     },
-     "execution_count": 71,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "cell_type": "markdown",
    "source": [
-    "model = tf.keras.Sequential()\n",
-    "\n",
-    "model.add(tf.keras.layers.Dense(20))\n",
-    "model.add(tf.keras.layers.Dense(60))\n",
-    "model.add(tf.keras.layers.Dense(60))\n",
-    "model.add(tf.keras.layers.Dense(60))\n",
-    "model.add(tf.keras.layers.Dense(6))\n",
-    "\n",
-    "model.compile(\n",
-    "    loss = 'mse',\n",
-    "    optimizer = tf.keras.optimizers.Adam(),\n",
-    "    metrics = [tf.keras.metrics.RootMeanSquaredError(name='rmse')]\n",
-    ")\n",
-    "\n",
-    "model.fit(train_x, train_y, validation_data=(test_x, test_y), epochs=20)"
+    "Transfer Learning"
    ],
    "metadata": {
     "collapsed": false
@@ -1911,27 +1825,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 72,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "188/188 [==============================] - 0s 2ms/step - loss: 0.1377 - rmse: 0.3711\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "0.37113267183303833"
-     },
-     "execution_count": 72,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "execution_count": 256,
+   "outputs": [],
    "source": [
-    "RMSE_ann = model.evaluate(test_x, test_y)[1]\n",
-    "RMSE_ann"
+    "from keras.layers import Input, Conv1D, MaxPool1D, Activation, Add, Dense, Flatten\n",
+    "from keras.models import Model\n",
+    "from keras.optimizers import Adam\n",
+    "from keras.callbacks import LearningRateScheduler"
    ],
    "metadata": {
     "collapsed": false
@@ -1939,16 +1839,49 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 73,
+   "execution_count": null,
    "outputs": [],
    "source": [
+    "input_shape = (69,1)\n",
     "\n",
-    "models = {\n",
-    "    'Ridge' : Ridge(),\n",
-    "    'Xgboost' : XGBRegressor(),\n",
-    "    'Lasso' : Lasso(),\n",
-    "    'Knn' : KNeighborsRegressor(n_neighbors = 4),\n",
-    "}"
+    "def make_model(final_layer_size=4):\n",
+    "    I = Input(input_shape)\n",
+    "    C = Conv1D(filters=32, kernel_size=5)(I)\n",
+    "\n",
+    "    C11 = Conv1D(filters=32, kernel_size=5, activation='relu', padding='same')(C)\n",
+    "    C12 = Conv1D(filters=32, kernel_size=5, padding='same')(C11)\n",
+    "    A11 = Add()([C, C12])\n",
+    "    R11 = Activation(activation='relu')(A11)\n",
+    "    M11 = MaxPool1D(pool_size=3, strides=2)(R11)\n",
+    "\n",
+    "    C21 = Conv1D(filters=32, kernel_size=5, activation='relu', padding='same')(M11)\n",
+    "    C22 = Conv1D(filters=32, kernel_size=5, padding='same')(C21)\n",
+    "    A21 = Add()([M11, C22])\n",
+    "    R21 = Activation(activation='relu')(A21)\n",
+    "    M21 = MaxPool1D(pool_size=3, strides=2)(R21)\n",
+    "\n",
+    "    C31 = Conv1D(filters=32, kernel_size=5, activation='relu', padding='same')(M21)\n",
+    "    C32 = Conv1D(filters=32, kernel_size=5, padding='same')(C31)\n",
+    "    A31 = Add()([M21, C32])\n",
+    "    R31 = Activation(activation='relu')(A31)\n",
+    "    M31 = MaxPool1D(pool_size=3, strides=2)(R31)\n",
+    "\n",
+    "    C41 = Conv1D(filters=32, kernel_size=5, activation='relu', padding='same')(M31)\n",
+    "    C42 = Conv1D(filters=32, kernel_size=5, padding='same')(C41)\n",
+    "    A41 = Add()([M31, C42])\n",
+    "    R41 = Activation(activation='relu')(A41)\n",
+    "    M41 = MaxPool1D(pool_size=3, strides=2)(R41)\n",
+    "\n",
+    "\n",
+    "    F1 = Flatten()(M41)\n",
+    "    D1 = Dense(32)(F1)\n",
+    "    R1 = Activation(activation='relu')(D1)\n",
+    "    D2 = Dense(32)(R1)\n",
+    "    D3 = Dense(final_layer_size)(D2)\n",
+    "\n",
+    "    O = Activation(activation='softmax')(D3)\n",
+    "\n",
+    "    return Model(inputs=I, outputs=O)"
    ],
    "metadata": {
     "collapsed": false
@@ -1956,23 +1889,11 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 74,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Ridge trained\n",
-      "Xgboost trained\n",
-      "Lasso trained\n",
-      "Knn trained\n"
-     ]
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
-    "for name, model in models.items():\n",
-    "    model.fit(train_x, train_y)\n",
-    "    print(f'{name} trained')"
+    "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(0.001, decay_steps=10000, decay_rate=0.75)\n",
+    "adam = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, amsgrad=False)"
    ],
    "metadata": {
     "collapsed": false
@@ -1980,16 +1901,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 75,
+   "execution_count": null,
    "outputs": [],
    "source": [
-    "results = {}\n",
-    "kf = KFold(n_splits= 10)\n",
-    "\n",
-    "for name, model in models.items():\n",
-    "    result = np.mean(np.sqrt(-cross_val_score(model, train_x, train_y,scoring=\"neg_mean_squared_error\" ,cv= kf)))\n",
-    "    results[name] = result\n",
-    "results['ANN'] = RMSE_ann"
+    "n_classes = len(np.unique(train_y))\n",
+    "model_ptbdb = make_model(n_classes)\n",
+    "model_ptbdb.summary()"
    ],
    "metadata": {
     "collapsed": false
@@ -1997,23 +1914,10 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 76,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Ridge : 0.37\n",
-      "Xgboost : 0.4\n",
-      "Lasso : 0.37\n",
-      "Knn : 0.41\n",
-      "ANN : 0.37\n"
-     ]
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
-    "for name, result in results.items():\n",
-    "    print(f\"{name} : {round(result, 2)}\")"
+    "X_train_ptbdb, X_test_ptbdb, y_train_ptbdb, y_test_ptbdb = train_test_split(X, y, test_size=0.3)"
    ],
    "metadata": {
     "collapsed": false
@@ -2021,31 +1925,36 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 77,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "          Knn   Xgboost     Ridge       ANN    Lasso\nRMSE  0.41321  0.399333  0.371373  0.371133  0.37038",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Knn</th>\n      <th>Xgboost</th>\n      <th>Ridge</th>\n      <th>ANN</th>\n      <th>Lasso</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>RMSE</th>\n      <td>0.41321</td>\n      <td>0.399333</td>\n      <td>0.371373</td>\n      <td>0.371133</td>\n      <td>0.37038</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-     },
-     "execution_count": 77,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "execution_count": null,
+   "outputs": [],
    "source": [
-    "results_df = pd.DataFrame(results, index=range(0,1)).T.rename(columns={0: 'RMSE'}).sort_values('RMSE', ascending=False)\n",
-    "results_df.T"
+    "model_ptbdb.compile(optimizer=adam, loss=\"categorical_crossentropy\", metrics=['accuracy'])"
    ],
    "metadata": {
     "collapsed": false
    }
   },
   {
-   "cell_type": "markdown",
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
    "source": [
-    "Transfer Learning"
+    "history = model_ptbdb.fit(np.expand_dims(X_train_ptbdb, axis=2),\n",
+    "                          y_train_ptbdb,\n",
+    "                          validation_split=0.3,\n",
+    "                          epochs=20,\n",
+    "                          batch_size=256,\n",
+    "                          verbose=0)"
    ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
    "metadata": {
     "collapsed": false
    }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,8 +5,6 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="8efa5f21-3291-4eca-a953-fa8634f1cc23" name="Changes" comment="NN continued">
-      <change beforePath="$PROJECT_DIR$/.idea/Career-Path-Predictor.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/Career-Path-Predictor.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Career-Path-Predictor.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/Career-Path-Predictor.ipynb" afterDir="false" />
     </list>
